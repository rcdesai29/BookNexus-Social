{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { directApiService } from '../services/directApi';\nexport function useGoogleBooksSimple(query = 'bestsellers', maxResults = 20, startIndex = 0) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalItems, setTotalItems] = useState(0);\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    const fetchBooks = async () => {\n      try {\n        console.log('Fetching books with query:', query);\n        const response = await directApiService.getGoogleBooks(query, maxResults);\n        const convertedBooks = (response.items || []).map(item => {\n          var _volumeInfo$industryI, _volumeInfo$industryI2, _volumeInfo$industryI3, _volumeInfo$industryI4, _volumeInfo$authors, _volumeInfo$imageLink;\n          const volumeInfo = item.volumeInfo || {};\n          const isbn = ((_volumeInfo$industryI = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI === void 0 ? void 0 : (_volumeInfo$industryI2 = _volumeInfo$industryI.find(id => id.type === 'ISBN_13')) === null || _volumeInfo$industryI2 === void 0 ? void 0 : _volumeInfo$industryI2.identifier) || ((_volumeInfo$industryI3 = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI3 === void 0 ? void 0 : (_volumeInfo$industryI4 = _volumeInfo$industryI3.find(id => id.type === 'ISBN_10')) === null || _volumeInfo$industryI4 === void 0 ? void 0 : _volumeInfo$industryI4.identifier) || '';\n          return {\n            id: item.id,\n            title: volumeInfo.title || 'Unknown Title',\n            authorName: ((_volumeInfo$authors = volumeInfo.authors) === null || _volumeInfo$authors === void 0 ? void 0 : _volumeInfo$authors.join(', ')) || 'Unknown Author',\n            isbn: isbn,\n            synopsis: volumeInfo.description || 'No description available.',\n            cover: ((_volumeInfo$imageLink = volumeInfo.imageLinks) === null || _volumeInfo$imageLink === void 0 ? void 0 : _volumeInfo$imageLink.thumbnail) || null,\n            publishedDate: volumeInfo.publishedDate,\n            pageCount: volumeInfo.pageCount,\n            categories: volumeInfo.categories,\n            averageRating: volumeInfo.averageRating || 0,\n            ratingsCount: volumeInfo.ratingsCount || 0,\n            isGoogleBook: true,\n            googleBookId: item.id\n          };\n        });\n\n        // Filter out books with very low rating counts but be lenient\n        const filteredBooks = convertedBooks.filter(book => book.ratingsCount === 0 || book.ratingsCount >= 5);\n        console.log('Converted books:', filteredBooks);\n        setData(filteredBooks);\n        setTotalItems(response.totalItems || filteredBooks.length);\n      } catch (err) {\n        console.error('Error fetching books:', err);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBooks();\n  }, [query, maxResults, startIndex]);\n  return {\n    data,\n    loading,\n    error,\n    totalItems\n  };\n}\n_s(useGoogleBooksSimple, \"Y0Kl6AhtjSc0CFBvrY8PXFAe5bU=\");","map":{"version":3,"names":["useEffect","useState","directApiService","useGoogleBooksSimple","query","maxResults","startIndex","_s","data","setData","loading","setLoading","error","setError","totalItems","setTotalItems","fetchBooks","console","log","response","getGoogleBooks","convertedBooks","items","map","item","_volumeInfo$industryI","_volumeInfo$industryI2","_volumeInfo$industryI3","_volumeInfo$industryI4","_volumeInfo$authors","_volumeInfo$imageLink","volumeInfo","isbn","industryIdentifiers","find","id","type","identifier","title","authorName","authors","join","synopsis","description","cover","imageLinks","thumbnail","publishedDate","pageCount","categories","averageRating","ratingsCount","isGoogleBook","googleBookId","filteredBooks","filter","book","length","err"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/hooks/useGoogleBooksSimple.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { directApiService } from '../services/directApi';\n\nexport interface GoogleBook {\n  id: string;\n  title: string;\n  authorName: string;\n  isbn: string;\n  synopsis: string;\n  cover: string | null;\n  publishedDate?: string;\n  pageCount?: number;\n  categories?: string[];\n  averageRating: number;\n  ratingsCount: number;\n  isGoogleBook: boolean;\n  googleBookId: string;\n}\n\nexport function useGoogleBooksSimple(\n  query: string = 'bestsellers',\n  maxResults: number = 20,\n  startIndex: number = 0\n) {\n  const [data, setData] = useState<GoogleBook[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<any>(null);\n  const [totalItems, setTotalItems] = useState<number>(0);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    \n    const fetchBooks = async () => {\n      try {\n        console.log('Fetching books with query:', query);\n        const response = await directApiService.getGoogleBooks(query, maxResults);\n\n        const convertedBooks = (response.items || []).map((item: any) => {\n          const volumeInfo = item.volumeInfo || {};\n          const isbn = volumeInfo.industryIdentifiers?.find((id: any) => id.type === 'ISBN_13')?.identifier ||\n                       volumeInfo.industryIdentifiers?.find((id: any) => id.type === 'ISBN_10')?.identifier ||\n                       '';\n\n          return {\n            id: item.id,\n            title: volumeInfo.title || 'Unknown Title',\n            authorName: volumeInfo.authors?.join(', ') || 'Unknown Author',\n            isbn: isbn,\n            synopsis: volumeInfo.description || 'No description available.',\n            cover: volumeInfo.imageLinks?.thumbnail || null,\n            publishedDate: volumeInfo.publishedDate,\n            pageCount: volumeInfo.pageCount,\n            categories: volumeInfo.categories,\n            averageRating: volumeInfo.averageRating || 0,\n            ratingsCount: volumeInfo.ratingsCount || 0,\n            isGoogleBook: true,\n            googleBookId: item.id\n          };\n        });\n\n        // Filter out books with very low rating counts but be lenient\n        const filteredBooks = convertedBooks.filter((book: GoogleBook) => \n          book.ratingsCount === 0 || book.ratingsCount >= 5\n        );\n\n        console.log('Converted books:', filteredBooks);\n        setData(filteredBooks);\n        setTotalItems(response.totalItems || filteredBooks.length);\n      } catch (err) {\n        console.error('Error fetching books:', err);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBooks();\n  }, [query, maxResults, startIndex]);\n\n  return { data, loading, error, totalItems };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
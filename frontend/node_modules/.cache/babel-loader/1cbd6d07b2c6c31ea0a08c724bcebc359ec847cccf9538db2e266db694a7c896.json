{"ast":null,"code":"const TOKEN_KEY='auth_token';// Helper function to dispatch auth state change events\nconst dispatchAuthChange=()=>{window.dispatchEvent(new CustomEvent('authStateChange'));};export const tokenService={setToken:token=>{localStorage.setItem(TOKEN_KEY,token);dispatchAuthChange();},getToken:()=>localStorage.getItem(TOKEN_KEY),removeToken:()=>{localStorage.removeItem(TOKEN_KEY);dispatchAuthChange();},isLoggedIn:()=>!!localStorage.getItem(TOKEN_KEY),getUser:()=>{const token=localStorage.getItem(TOKEN_KEY);if(!token)return null;try{const payload=token.split('.')[1];const decoded=JSON.parse(atob(payload.replace(/-/g,'+').replace(/_/g,'/')));// Common JWT fields: 'fullName', 'email', 'sub', etc.\nreturn{id:decoded.userId||decoded.id||1,// Default to 1 if not found\nname:decoded.fullName||decoded.name,email:decoded.email||decoded.sub};}catch(_unused){return null;}}};","map":{"version":3,"names":["TOKEN_KEY","dispatchAuthChange","window","dispatchEvent","CustomEvent","tokenService","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isLoggedIn","getUser","payload","split","decoded","JSON","parse","atob","replace","id","userId","name","fullName","email","sub","_unused"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/services/tokenService.ts"],"sourcesContent":["const TOKEN_KEY = 'auth_token';\n\n// Helper function to dispatch auth state change events\nconst dispatchAuthChange = () => {\n  window.dispatchEvent(new CustomEvent('authStateChange'));\n};\n\nexport const tokenService = {\n  setToken: (token: string) => {\n    localStorage.setItem(TOKEN_KEY, token);\n    dispatchAuthChange();\n  },\n  getToken: () => localStorage.getItem(TOKEN_KEY),\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    dispatchAuthChange();\n  },\n  isLoggedIn: () => !!localStorage.getItem(TOKEN_KEY),\n  getUser: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) return null;\n    try {\n      const payload = token.split('.')[1];\n      const decoded = JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')));\n      // Common JWT fields: 'fullName', 'email', 'sub', etc.\n      return {\n        id: decoded.userId || decoded.id || 1, // Default to 1 if not found\n        name: decoded.fullName || decoded.name,\n        email: decoded.email || decoded.sub,\n      };\n    } catch {\n      return null;\n    }\n  },\n}; "],"mappings":"AAAA,KAAM,CAAAA,SAAS,CAAG,YAAY,CAE9B;AACA,KAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CAC/BC,MAAM,CAACC,aAAa,CAAC,GAAI,CAAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAC1D,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAG,CAC1BC,QAAQ,CAAGC,KAAa,EAAK,CAC3BC,YAAY,CAACC,OAAO,CAACT,SAAS,CAAEO,KAAK,CAAC,CACtCN,kBAAkB,CAAC,CAAC,CACtB,CAAC,CACDS,QAAQ,CAAEA,CAAA,GAAMF,YAAY,CAACG,OAAO,CAACX,SAAS,CAAC,CAC/CY,WAAW,CAAEA,CAAA,GAAM,CACjBJ,YAAY,CAACK,UAAU,CAACb,SAAS,CAAC,CAClCC,kBAAkB,CAAC,CAAC,CACtB,CAAC,CACDa,UAAU,CAAEA,CAAA,GAAM,CAAC,CAACN,YAAY,CAACG,OAAO,CAACX,SAAS,CAAC,CACnDe,OAAO,CAAEA,CAAA,GAAM,CACb,KAAM,CAAAR,KAAK,CAAGC,YAAY,CAACG,OAAO,CAACX,SAAS,CAAC,CAC7C,GAAI,CAACO,KAAK,CAAE,MAAO,KAAI,CACvB,GAAI,CACF,KAAM,CAAAS,OAAO,CAAGT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACnC,KAAM,CAAAC,OAAO,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,OAAO,CAACM,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAAC,CAAC,CAC/E;AACA,MAAO,CACLC,EAAE,CAAEL,OAAO,CAACM,MAAM,EAAIN,OAAO,CAACK,EAAE,EAAI,CAAC,CAAE;AACvCE,IAAI,CAAEP,OAAO,CAACQ,QAAQ,EAAIR,OAAO,CAACO,IAAI,CACtCE,KAAK,CAAET,OAAO,CAACS,KAAK,EAAIT,OAAO,CAACU,GAClC,CAAC,CACH,CAAE,MAAAC,OAAA,CAAM,CACN,MAAO,KAAI,CACb,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { directApiService } from '../services/directApi';\nexport function useGoogleBooksSimple(query = 'bestsellers', maxResults = 20, startIndex = 0) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalItems, setTotalItems] = useState(0);\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    const fetchBooks = async () => {\n      try {\n        console.log('Fetching books with query:', query);\n        const response = await directApiService.getGoogleBooks(query, maxResults);\n        const convertedBooks = (response.items || []).map(item => {\n          var _item$industryIdentif, _item$industryIdentif2, _item$industryIdentif3, _item$industryIdentif4, _item$authors, _item$imageLinks;\n          // Backend returns flattened structure, not wrapped in volumeInfo\n          const isbn = item.isbn13 || item.isbn10 || ((_item$industryIdentif = item.industryIdentifiers) === null || _item$industryIdentif === void 0 ? void 0 : (_item$industryIdentif2 = _item$industryIdentif.find(id => id.type === 'ISBN_13')) === null || _item$industryIdentif2 === void 0 ? void 0 : _item$industryIdentif2.identifier) || ((_item$industryIdentif3 = item.industryIdentifiers) === null || _item$industryIdentif3 === void 0 ? void 0 : (_item$industryIdentif4 = _item$industryIdentif3.find(id => id.type === 'ISBN_10')) === null || _item$industryIdentif4 === void 0 ? void 0 : _item$industryIdentif4.identifier) || '';\n          return {\n            id: item.id,\n            title: item.title || 'Unknown Title',\n            authorName: ((_item$authors = item.authors) === null || _item$authors === void 0 ? void 0 : _item$authors.join(', ')) || 'Unknown Author',\n            isbn: isbn,\n            synopsis: item.description || 'No description available.',\n            cover: ((_item$imageLinks = item.imageLinks) === null || _item$imageLinks === void 0 ? void 0 : _item$imageLinks.thumbnail) || null,\n            publishedDate: item.publishedDate,\n            pageCount: item.pageCount,\n            categories: item.categories,\n            averageRating: item.averageRating || 0,\n            ratingsCount: item.ratingsCount || 0,\n            isGoogleBook: true,\n            googleBookId: item.id\n          };\n        });\n\n        // Filter out books with very low rating counts but be lenient\n        const filteredBooks = convertedBooks.filter(book => book.ratingsCount === 0 || book.ratingsCount >= 5);\n        console.log('Converted books:', filteredBooks);\n        setData(filteredBooks);\n        setTotalItems(response.totalItems || filteredBooks.length);\n      } catch (err) {\n        console.error('Error fetching books:', err);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBooks();\n  }, [query, maxResults, startIndex]);\n  return {\n    data,\n    loading,\n    error,\n    totalItems\n  };\n}\n_s(useGoogleBooksSimple, \"Y0Kl6AhtjSc0CFBvrY8PXFAe5bU=\");","map":{"version":3,"names":["useEffect","useState","directApiService","useGoogleBooksSimple","query","maxResults","startIndex","_s","data","setData","loading","setLoading","error","setError","totalItems","setTotalItems","fetchBooks","console","log","response","getGoogleBooks","convertedBooks","items","map","item","_item$industryIdentif","_item$industryIdentif2","_item$industryIdentif3","_item$industryIdentif4","_item$authors","_item$imageLinks","isbn","isbn13","isbn10","industryIdentifiers","find","id","type","identifier","title","authorName","authors","join","synopsis","description","cover","imageLinks","thumbnail","publishedDate","pageCount","categories","averageRating","ratingsCount","isGoogleBook","googleBookId","filteredBooks","filter","book","length","err"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/hooks/useGoogleBooksSimple.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { directApiService } from '../services/directApi';\n\nexport interface GoogleBook {\n  id: string;\n  title: string;\n  authorName: string;\n  isbn: string;\n  synopsis: string;\n  cover: string | null;\n  publishedDate?: string;\n  pageCount?: number;\n  categories?: string[];\n  averageRating: number;\n  ratingsCount: number;\n  isGoogleBook: boolean;\n  googleBookId: string;\n}\n\nexport function useGoogleBooksSimple(\n  query: string = 'bestsellers',\n  maxResults: number = 20,\n  startIndex: number = 0\n) {\n  const [data, setData] = useState<GoogleBook[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<any>(null);\n  const [totalItems, setTotalItems] = useState<number>(0);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    \n    const fetchBooks = async () => {\n      try {\n        console.log('Fetching books with query:', query);\n        const response = await directApiService.getGoogleBooks(query, maxResults);\n\n        const convertedBooks = (response.items || []).map((item: any) => {\n          // Backend returns flattened structure, not wrapped in volumeInfo\n          const isbn = item.isbn13 || item.isbn10 || \n                       item.industryIdentifiers?.find((id: any) => id.type === 'ISBN_13')?.identifier ||\n                       item.industryIdentifiers?.find((id: any) => id.type === 'ISBN_10')?.identifier ||\n                       '';\n\n          return {\n            id: item.id,\n            title: item.title || 'Unknown Title',\n            authorName: item.authors?.join(', ') || 'Unknown Author',\n            isbn: isbn,\n            synopsis: item.description || 'No description available.',\n            cover: item.imageLinks?.thumbnail || null,\n            publishedDate: item.publishedDate,\n            pageCount: item.pageCount,\n            categories: item.categories,\n            averageRating: item.averageRating || 0,\n            ratingsCount: item.ratingsCount || 0,\n            isGoogleBook: true,\n            googleBookId: item.id\n          };\n        });\n\n        // Filter out books with very low rating counts but be lenient\n        const filteredBooks = convertedBooks.filter((book: GoogleBook) => \n          book.ratingsCount === 0 || book.ratingsCount >= 5\n        );\n\n        console.log('Converted books:', filteredBooks);\n        setData(filteredBooks);\n        setTotalItems(response.totalItems || filteredBooks.length);\n      } catch (err) {\n        console.error('Error fetching books:', err);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBooks();\n  }, [query, maxResults, startIndex]);\n\n  return { data, loading, error, totalItems };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
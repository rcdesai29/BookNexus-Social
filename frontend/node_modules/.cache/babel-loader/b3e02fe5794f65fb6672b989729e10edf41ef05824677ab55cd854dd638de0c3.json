{"ast":null,"code":"import { request as __request } from '../core/request';\nimport { OpenAPI } from '../core/OpenAPI';\nexport class UserBookListService {\n  /**\n   * Add a Google Book to a user's list\n   * @param googleBookId The Google Book ID\n   * @param listType The list type (FAVORITE, CURRENTLY_READING, TBR, READ)\n   * @returns UserBookList\n   * @throws ApiError\n   */\n  static async addGoogleBookToList(googleBookId, listType) {\n    return __request(OpenAPI, {\n      method: 'POST',\n      url: `/user-book-lists/google-books/${googleBookId}/add`,\n      query: {\n        'listType': listType\n      }\n    });\n  }\n\n  /**\n   * Remove a Google Book from a user's list\n   * @param googleBookId The Google Book ID\n   * @param listType The list type (FAVORITE, CURRENTLY_READING, TBR, READ)\n   * @returns void\n   * @throws ApiError\n   */\n  static async removeGoogleBookFromList(googleBookId, listType) {\n    return __request(OpenAPI, {\n      method: 'DELETE',\n      url: `/user-book-lists/google-books/${googleBookId}/remove`,\n      query: {\n        'listType': listType\n      }\n    });\n  }\n\n  /**\n   * Get all books in a specific list for the current user\n   * @param listType The list type (FAVORITE, CURRENTLY_READING, TBR, READ)\n   * @returns UserBookList[]\n   * @throws ApiError\n   */\n  static async getUserBooksByListType(listType) {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: `/user-book-lists/list-type/${listType}`\n    });\n  }\n\n  /**\n   * Get all books across all lists for the current user\n   * @returns UserBookList[]\n   * @throws ApiError\n   */\n  static async getAllUserBooks() {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/user-book-lists/all'\n    });\n  }\n\n  /**\n   * Get user's favorite books\n   * @returns UserBookList[]\n   * @throws ApiError\n   */\n  static async getFavorites() {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/user-book-lists/favorites'\n    });\n  }\n\n  /**\n   * Get user's currently reading books\n   * @returns UserBookList[]\n   * @throws ApiError\n   */\n  static async getCurrentlyReading() {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/api/v1/user-book-lists/currently-reading'\n    });\n  }\n\n  /**\n   * Get user's TBR (To Be Read) books\n   * @returns UserBookList[]\n   * @throws ApiError\n   */\n  static async getTBR() {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/api/v1/user-book-lists/tbr'\n    });\n  }\n\n  /**\n   * Get user's read books\n   * @returns UserBookList[]\n   * @throws ApiError\n   */\n  static async getRead() {\n    return __request(OpenAPI, {\n      method: 'GET',\n      url: '/api/v1/user-book-lists/read'\n    });\n  }\n}","map":{"version":3,"names":["request","__request","OpenAPI","UserBookListService","addGoogleBookToList","googleBookId","listType","method","url","query","removeGoogleBookFromList","getUserBooksByListType","getAllUserBooks","getFavorites","getCurrentlyReading","getTBR","getRead"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/app/services/services/UserBookListService.ts"],"sourcesContent":["import { request as __request } from '../core/request';\nimport { OpenAPI } from '../core/OpenAPI';\nimport type { CancelablePromise } from '../core/CancelablePromise';\n\nexport interface UserBookList {\n    id?: number;\n    user?: {\n        id?: number;\n        fullName?: string;\n        email?: string;\n    };\n    book?: {\n        id?: number;\n        title?: string;\n        authorName?: string;\n        cover?: string;\n    };\n    googleBook?: {\n        id?: number;\n        googleBookId?: string;\n        title?: string;\n        authorName?: string;\n        coverUrl?: string;\n        description?: string;\n        averageRating?: number;\n        ratingsCount?: number;\n    };\n    listType?: 'FAVORITE' | 'CURRENTLY_READING' | 'TBR' | 'READ';\n    isActive?: boolean;\n    userRating?: number;\n    userReview?: string;\n    readingProgress?: number;\n    createdDate?: string;\n    lastModifiedDate?: string;\n}\n\nexport class UserBookListService {\n    /**\n     * Add a Google Book to a user's list\n     * @param googleBookId The Google Book ID\n     * @param listType The list type (FAVORITE, CURRENTLY_READING, TBR, READ)\n     * @returns UserBookList\n     * @throws ApiError\n     */\n    public static async addGoogleBookToList(\n        googleBookId: string,\n        listType: 'FAVORITE' | 'CURRENTLY_READING' | 'TBR' | 'READ'\n    ): Promise<UserBookList> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: `/user-book-lists/google-books/${googleBookId}/add`,\n            query: {\n                'listType': listType,\n            },\n        });\n    }\n\n    /**\n     * Remove a Google Book from a user's list\n     * @param googleBookId The Google Book ID\n     * @param listType The list type (FAVORITE, CURRENTLY_READING, TBR, READ)\n     * @returns void\n     * @throws ApiError\n     */\n    public static async removeGoogleBookFromList(\n        googleBookId: string,\n        listType: 'FAVORITE' | 'CURRENTLY_READING' | 'TBR' | 'READ'\n    ): Promise<void> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: `/user-book-lists/google-books/${googleBookId}/remove`,\n            query: {\n                'listType': listType,\n            },\n        });\n    }\n\n    /**\n     * Get all books in a specific list for the current user\n     * @param listType The list type (FAVORITE, CURRENTLY_READING, TBR, READ)\n     * @returns UserBookList[]\n     * @throws ApiError\n     */\n    public static async getUserBooksByListType(\n        listType: 'FAVORITE' | 'CURRENTLY_READING' | 'TBR' | 'READ'\n    ): Promise<UserBookList[]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: `/user-book-lists/list-type/${listType}`,\n        });\n    }\n\n    /**\n     * Get all books across all lists for the current user\n     * @returns UserBookList[]\n     * @throws ApiError\n     */\n    public static async getAllUserBooks(): Promise<UserBookList[]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/user-book-lists/all',\n        });\n    }\n\n    /**\n     * Get user's favorite books\n     * @returns UserBookList[]\n     * @throws ApiError\n     */\n    public static async getFavorites(): Promise<UserBookList[]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/user-book-lists/favorites',\n        });\n    }\n\n    /**\n     * Get user's currently reading books\n     * @returns UserBookList[]\n     * @throws ApiError\n     */\n    public static async getCurrentlyReading(): Promise<UserBookList[]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/api/v1/user-book-lists/currently-reading',\n        });\n    }\n\n    /**\n     * Get user's TBR (To Be Read) books\n     * @returns UserBookList[]\n     * @throws ApiError\n     */\n    public static async getTBR(): Promise<UserBookList[]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/api/v1/user-book-lists/tbr',\n        });\n    }\n\n    /**\n     * Get user's read books\n     * @returns UserBookList[]\n     * @throws ApiError\n     */\n    public static async getRead(): Promise<UserBookList[]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/api/v1/user-book-lists/read',\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAO,IAAIC,SAAS,QAAQ,iBAAiB;AACtD,SAASC,OAAO,QAAQ,iBAAiB;AAmCzC,OAAO,MAAMC,mBAAmB,CAAC;EAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,aAAoBC,mBAAmBA,CACnCC,YAAoB,EACpBC,QAA2D,EACtC;IACrB,OAAOL,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,iCAAiCH,YAAY,MAAM;MACxDI,KAAK,EAAE;QACH,UAAU,EAAEH;MAChB;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,aAAoBI,wBAAwBA,CACxCL,YAAoB,EACpBC,QAA2D,EAC9C;IACb,OAAOL,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,QAAQ;MAChBC,GAAG,EAAE,iCAAiCH,YAAY,SAAS;MAC3DI,KAAK,EAAE;QACH,UAAU,EAAEH;MAChB;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,aAAoBK,sBAAsBA,CACtCL,QAA2D,EACpC;IACvB,OAAOL,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE,8BAA8BF,QAAQ;IAC/C,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACI,aAAoBM,eAAeA,CAAA,EAA4B;IAC3D,OAAOX,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE;IACT,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACI,aAAoBK,YAAYA,CAAA,EAA4B;IACxD,OAAOZ,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE;IACT,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACI,aAAoBM,mBAAmBA,CAAA,EAA4B;IAC/D,OAAOb,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE;IACT,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACI,aAAoBO,MAAMA,CAAA,EAA4B;IAClD,OAAOd,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE;IACT,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACI,aAAoBQ,OAAOA,CAAA,EAA4B;IACnD,OAAOf,SAAS,CAACC,OAAO,EAAE;MACtBK,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE;IACT,CAAC,CAAC;EACN;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
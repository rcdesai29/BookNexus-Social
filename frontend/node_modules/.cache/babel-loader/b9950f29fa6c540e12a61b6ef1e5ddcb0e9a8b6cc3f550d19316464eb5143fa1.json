{"ast":null,"code":"const TOKEN_KEY = 'auth_token';\n\n// Helper function to dispatch auth state change events\nconst dispatchAuthChange = () => {\n  window.dispatchEvent(new CustomEvent('authStateChange'));\n};\nexport const tokenService = {\n  setToken: token => {\n    localStorage.setItem(TOKEN_KEY, token);\n    dispatchAuthChange();\n  },\n  getToken: () => localStorage.getItem(TOKEN_KEY),\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    dispatchAuthChange();\n  },\n  isLoggedIn: () => !!localStorage.getItem(TOKEN_KEY),\n  getUser: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) return null;\n    try {\n      const payload = token.split('.')[1];\n      const decoded = JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')));\n      // Common JWT fields: 'fullName', 'email', 'sub', etc.\n      return {\n        id: decoded.userId || decoded.id || 1,\n        // Default to 1 if not found\n        name: decoded.fullName || decoded.name,\n        email: decoded.email || decoded.sub\n      };\n    } catch {\n      return null;\n    }\n  }\n};","map":{"version":3,"names":["TOKEN_KEY","dispatchAuthChange","window","dispatchEvent","CustomEvent","tokenService","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isLoggedIn","getUser","payload","split","decoded","JSON","parse","atob","replace","id","userId","name","fullName","email","sub"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/services/tokenService.ts"],"sourcesContent":["const TOKEN_KEY = 'auth_token';\n\n// Helper function to dispatch auth state change events\nconst dispatchAuthChange = () => {\n  window.dispatchEvent(new CustomEvent('authStateChange'));\n};\n\nexport const tokenService = {\n  setToken: (token: string) => {\n    localStorage.setItem(TOKEN_KEY, token);\n    dispatchAuthChange();\n  },\n  getToken: () => localStorage.getItem(TOKEN_KEY),\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    dispatchAuthChange();\n  },\n  isLoggedIn: () => !!localStorage.getItem(TOKEN_KEY),\n  getUser: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) return null;\n    try {\n      const payload = token.split('.')[1];\n      const decoded = JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')));\n      // Common JWT fields: 'fullName', 'email', 'sub', etc.\n      return {\n        id: decoded.userId || decoded.id || 1, // Default to 1 if not found\n        name: decoded.fullName || decoded.name,\n        email: decoded.email || decoded.sub,\n      };\n    } catch {\n      return null;\n    }\n  },\n}; "],"mappings":"AAAA,MAAMA,SAAS,GAAG,YAAY;;AAE9B;AACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/BC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,iBAAiB,CAAC,CAAC;AAC1D,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG;EAC1BC,QAAQ,EAAGC,KAAa,IAAK;IAC3BC,YAAY,CAACC,OAAO,CAACT,SAAS,EAAEO,KAAK,CAAC;IACtCN,kBAAkB,CAAC,CAAC;EACtB,CAAC;EACDS,QAAQ,EAAEA,CAAA,KAAMF,YAAY,CAACG,OAAO,CAACX,SAAS,CAAC;EAC/CY,WAAW,EAAEA,CAAA,KAAM;IACjBJ,YAAY,CAACK,UAAU,CAACb,SAAS,CAAC;IAClCC,kBAAkB,CAAC,CAAC;EACtB,CAAC;EACDa,UAAU,EAAEA,CAAA,KAAM,CAAC,CAACN,YAAY,CAACG,OAAO,CAACX,SAAS,CAAC;EACnDe,OAAO,EAAEA,CAAA,KAAM;IACb,MAAMR,KAAK,GAAGC,YAAY,CAACG,OAAO,CAACX,SAAS,CAAC;IAC7C,IAAI,CAACO,KAAK,EAAE,OAAO,IAAI;IACvB,IAAI;MACF,MAAMS,OAAO,GAAGT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,OAAO,CAACM,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;MAC/E;MACA,OAAO;QACLC,EAAE,EAAEL,OAAO,CAACM,MAAM,IAAIN,OAAO,CAACK,EAAE,IAAI,CAAC;QAAE;QACvCE,IAAI,EAAEP,OAAO,CAACQ,QAAQ,IAAIR,OAAO,CAACO,IAAI;QACtCE,KAAK,EAAET,OAAO,CAACS,KAAK,IAAIT,OAAO,CAACU;MAClC,CAAC;IACH,CAAC,CAAC,MAAM;MACN,OAAO,IAAI;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Direct API service to bypass OpenAPI issues\nlet cachedBooksData=null;let cacheTime=0;const CACHE_DURATION=3*60*1000;// 3 minutes\nexport const directApiService={async getGoogleBooks(){let query=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'bestsellers';let maxResults=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;// Use cache for trending/bestsellers queries to improve performance\nif((query==='bestsellers'||query==='trending')&&cachedBooksData&&Date.now()-cacheTime<CACHE_DURATION){console.log('Using cached books data for better performance');return cachedBooksData;}try{let endpoint='';if(query==='bestsellers'||query==='trending'){endpoint=\"http://localhost:8088/api/v1/google-books/trending?maxResults=\".concat(maxResults);}else if(query==='popular'){endpoint=\"http://localhost:8088/api/v1/google-books/popular?category=fiction&maxResults=\".concat(maxResults);}else{endpoint=\"http://localhost:8088/api/v1/google-books/search?q=\".concat(encodeURIComponent(query),\"&maxResults=\").concat(maxResults,\"&startIndex=0\");}console.log('Making direct API call to:',endpoint);const response=await fetch(endpoint,{method:'GET',headers:{'Content-Type':'application/json'}});console.log('Response status:',response.status);console.log('Response headers:',Object.fromEntries(response.headers.entries()));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log('API Response:',data);// Cache the results for trending/bestsellers queries\nif(query==='bestsellers'||query==='trending'){cachedBooksData=data;cacheTime=Date.now();console.log('Cached books data for improved performance');}return data;}catch(error){console.error('Direct API call failed:',error);throw error;}}};","map":{"version":3,"names":["cachedBooksData","cacheTime","CACHE_DURATION","directApiService","getGoogleBooks","query","arguments","length","undefined","maxResults","Date","now","console","log","endpoint","concat","encodeURIComponent","response","fetch","method","headers","status","Object","fromEntries","entries","ok","Error","data","json","error"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/services/directApi.ts"],"sourcesContent":["// Direct API service to bypass OpenAPI issues\nlet cachedBooksData: any = null;\nlet cacheTime = 0;\nconst CACHE_DURATION = 3 * 60 * 1000; // 3 minutes\n\nexport const directApiService = {\n  async getGoogleBooks(query: string = 'bestsellers', maxResults: number = 20): Promise<any> {\n    // Use cache for trending/bestsellers queries to improve performance\n    if ((query === 'bestsellers' || query === 'trending') && cachedBooksData && (Date.now() - cacheTime < CACHE_DURATION)) {\n      console.log('Using cached books data for better performance');\n      return cachedBooksData;\n    }\n    try {\n      let endpoint = '';\n      \n      if (query === 'bestsellers' || query === 'trending') {\n        endpoint = `http://localhost:8088/api/v1/google-books/trending?maxResults=${maxResults}`;\n      } else if (query === 'popular') {\n        endpoint = `http://localhost:8088/api/v1/google-books/popular?category=fiction&maxResults=${maxResults}`;\n      } else {\n        endpoint = `http://localhost:8088/api/v1/google-books/search?q=${encodeURIComponent(query)}&maxResults=${maxResults}&startIndex=0`;\n      }\n      \n      console.log('Making direct API call to:', endpoint);\n      \n      const response = await fetch(endpoint, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('API Response:', data);\n      \n      // Cache the results for trending/bestsellers queries\n      if (query === 'bestsellers' || query === 'trending') {\n        cachedBooksData = data;\n        cacheTime = Date.now();\n        console.log('Cached books data for improved performance');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Direct API call failed:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA;AACA,GAAI,CAAAA,eAAoB,CAAG,IAAI,CAC/B,GAAI,CAAAC,SAAS,CAAG,CAAC,CACjB,KAAM,CAAAC,cAAc,CAAG,CAAC,CAAG,EAAE,CAAG,IAAI,CAAE;AAEtC,MAAO,MAAM,CAAAC,gBAAgB,CAAG,CAC9B,KAAM,CAAAC,cAAcA,CAAA,CAAuE,IAAtE,CAAAC,KAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,aAAa,IAAE,CAAAG,UAAkB,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACzE;AACA,GAAI,CAACD,KAAK,GAAK,aAAa,EAAIA,KAAK,GAAK,UAAU,GAAKL,eAAe,EAAKU,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGV,SAAS,CAAGC,cAAe,CAAE,CACrHU,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC,CAC7D,MAAO,CAAAb,eAAe,CACxB,CACA,GAAI,CACF,GAAI,CAAAc,QAAQ,CAAG,EAAE,CAEjB,GAAIT,KAAK,GAAK,aAAa,EAAIA,KAAK,GAAK,UAAU,CAAE,CACnDS,QAAQ,kEAAAC,MAAA,CAAoEN,UAAU,CAAE,CAC1F,CAAC,IAAM,IAAIJ,KAAK,GAAK,SAAS,CAAE,CAC9BS,QAAQ,kFAAAC,MAAA,CAAoFN,UAAU,CAAE,CAC1G,CAAC,IAAM,CACLK,QAAQ,uDAAAC,MAAA,CAAyDC,kBAAkB,CAACX,KAAK,CAAC,iBAAAU,MAAA,CAAeN,UAAU,iBAAe,CACpI,CAEAG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEC,QAAQ,CAAC,CAEnD,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,QAAQ,CAAE,CACrCK,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEFR,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEI,QAAQ,CAACI,MAAM,CAAC,CAChDT,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAES,MAAM,CAACC,WAAW,CAACN,QAAQ,CAACG,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC,CAEhF,GAAI,CAACP,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAX,MAAA,CAAwBE,QAAQ,CAACI,MAAM,CAAE,CAAC,CAC3D,CAEA,KAAM,CAAAM,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAClChB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEc,IAAI,CAAC,CAElC;AACA,GAAItB,KAAK,GAAK,aAAa,EAAIA,KAAK,GAAK,UAAU,CAAE,CACnDL,eAAe,CAAG2B,IAAI,CACtB1B,SAAS,CAAGS,IAAI,CAACC,GAAG,CAAC,CAAC,CACtBC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CAC3D,CAEA,MAAO,CAAAc,IAAI,CACb,CAAE,MAAOE,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
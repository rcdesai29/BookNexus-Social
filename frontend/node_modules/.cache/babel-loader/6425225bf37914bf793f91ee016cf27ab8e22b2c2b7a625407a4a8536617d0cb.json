{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { UserBookListService } from '../app/services/services/UserBookListService';\nimport { useAuth } from './useAuth';\nimport { tokenService } from '../services/tokenService';\nexport function useUserBookList(listType) {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchData = async () => {\n    if (!isLoggedIn) {\n      setLoading(false);\n      setError(null);\n      setData([]);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      let result;\n      if (listType) {\n        // Fetch specific list type\n        result = await UserBookListService.getUserBooksByListType(listType);\n      } else {\n        // Fetch all books across all lists\n        result = await UserBookListService.getAllUserBooks();\n      }\n      setData(result || []);\n    } catch (err) {\n      console.error('Error fetching user books:', err);\n\n      // Check if it's an authentication error (401/403)\n      if ((err === null || err === void 0 ? void 0 : err.status) === 401 || (err === null || err === void 0 ? void 0 : err.status) === 403 || err !== null && err !== void 0 && err.message && (err.message.includes('Forbidden') || err.message.includes('Unauthorized'))) {\n        console.log('Authentication error detected, logging out user');\n        tokenService.logout();\n        return;\n      }\n      setError(err);\n      // Set empty array on error so user sees empty state instead of error\n      setData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [isLoggedIn, listType]);\n  const refetch = () => {\n    fetchData();\n  };\n  const moveToShelf = async (bookId, fromShelf, toShelf) => {\n    try {\n      // Remove from current shelf\n      await UserBookListService.removeGoogleBookFromList(bookId, fromShelf);\n      // Add to new shelf\n      await UserBookListService.addGoogleBookToList(bookId, toShelf);\n      // Refresh data\n      await fetchData();\n    } catch (error) {\n      console.error('Failed to move book to shelf:', error);\n\n      // Check if it's an authentication error (401/403)\n      if ((error === null || error === void 0 ? void 0 : error.status) === 401 || (error === null || error === void 0 ? void 0 : error.status) === 403 || error !== null && error !== void 0 && error.message && (error.message.includes('Forbidden') || error.message.includes('Unauthorized'))) {\n        console.log('Authentication error detected, logging out user');\n        tokenService.logout();\n        return;\n      }\n      throw error;\n    }\n  };\n  const removeFromLibrary = async bookId => {\n    try {\n      // Find the book to determine its current shelf\n      const book = data.find(item => {\n        var _item$googleBook, _item$book, _item$book$id;\n        return ((_item$googleBook = item.googleBook) === null || _item$googleBook === void 0 ? void 0 : _item$googleBook.googleBookId) === bookId || ((_item$book = item.book) === null || _item$book === void 0 ? void 0 : (_item$book$id = _item$book.id) === null || _item$book$id === void 0 ? void 0 : _item$book$id.toString()) === bookId;\n      });\n      if (book && book.listType) {\n        await UserBookListService.removeGoogleBookFromList(bookId, book.listType);\n        // Refresh data\n        await fetchData();\n      }\n    } catch (error) {\n      console.error('Failed to remove book from library:', error);\n      throw error;\n    }\n  };\n  const markAsFinished = async bookId => {\n    try {\n      // Move from currently reading to read\n      await moveToShelf(bookId, 'CURRENTLY_READING', 'READ');\n    } catch (error) {\n      console.error('Failed to mark book as finished:', error);\n      throw error;\n    }\n  };\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    moveToShelf,\n    removeFromLibrary,\n    markAsFinished\n  };\n}\n_s(useUserBookList, \"6EQXdsde06X2bckWY/kCr/vE5NA=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useEffect","useState","UserBookListService","useAuth","tokenService","useUserBookList","listType","_s","isLoggedIn","data","setData","loading","setLoading","error","setError","fetchData","result","getUserBooksByListType","getAllUserBooks","err","console","status","message","includes","log","logout","refetch","moveToShelf","bookId","fromShelf","toShelf","removeGoogleBookFromList","addGoogleBookToList","removeFromLibrary","book","find","item","_item$googleBook","_item$book","_item$book$id","googleBook","googleBookId","id","toString","markAsFinished"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/hooks/useUserBookList.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { UserBookList, UserBookListService } from '../app/services/services/UserBookListService';\nimport { useAuth } from './useAuth';\nimport { tokenService } from '../services/tokenService';\n\nexport function useUserBookList(listType?: 'FAVORITE' | 'CURRENTLY_READING' | 'TBR' | 'READ') {\n  const { isLoggedIn } = useAuth();\n  const [data, setData] = useState<UserBookList[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<any>(null);\n\n  const fetchData = async () => {\n    if (!isLoggedIn) {\n      setLoading(false);\n      setError(null);\n      setData([]);\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      let result: UserBookList[];\n      \n      if (listType) {\n        // Fetch specific list type\n        result = await UserBookListService.getUserBooksByListType(listType);\n      } else {\n        // Fetch all books across all lists\n        result = await UserBookListService.getAllUserBooks();\n      }\n      setData(result || []);\n    } catch (err: any) {\n      console.error('Error fetching user books:', err);\n      \n      // Check if it's an authentication error (401/403)\n      if (err?.status === 401 || err?.status === 403 || \n          (err?.message && (err.message.includes('Forbidden') || err.message.includes('Unauthorized')))) {\n        console.log('Authentication error detected, logging out user');\n        tokenService.logout();\n        return;\n      }\n      \n      setError(err);\n      // Set empty array on error so user sees empty state instead of error\n      setData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [isLoggedIn, listType]);\n\n  const refetch = () => {\n    fetchData();\n  };\n\n  const moveToShelf = async (bookId: string, fromShelf: string, toShelf: string) => {\n    try {\n      // Remove from current shelf\n      await UserBookListService.removeGoogleBookFromList(bookId, fromShelf as any);\n      // Add to new shelf\n      await UserBookListService.addGoogleBookToList(bookId, toShelf as any);\n      // Refresh data\n      await fetchData();\n    } catch (error: any) {\n      console.error('Failed to move book to shelf:', error);\n      \n      // Check if it's an authentication error (401/403)\n      if (error?.status === 401 || error?.status === 403 || \n          (error?.message && (error.message.includes('Forbidden') || error.message.includes('Unauthorized')))) {\n        console.log('Authentication error detected, logging out user');\n        tokenService.logout();\n        return;\n      }\n      \n      throw error;\n    }\n  };\n\n  const removeFromLibrary = async (bookId: string) => {\n    try {\n      // Find the book to determine its current shelf\n      const book = data.find(item => \n        (item.googleBook?.googleBookId === bookId) || \n        (item.book?.id?.toString() === bookId)\n      );\n      \n      if (book && book.listType) {\n        await UserBookListService.removeGoogleBookFromList(bookId, book.listType);\n        // Refresh data\n        await fetchData();\n      }\n    } catch (error) {\n      console.error('Failed to remove book from library:', error);\n      throw error;\n    }\n  };\n\n  const markAsFinished = async (bookId: string) => {\n    try {\n      // Move from currently reading to read\n      await moveToShelf(bookId, 'CURRENTLY_READING', 'READ');\n    } catch (error) {\n      console.error('Failed to mark book as finished:', error);\n      throw error;\n    }\n  };\n\n  return { \n    data, \n    loading, \n    error, \n    refetch, \n    moveToShelf, \n    removeFromLibrary, \n    markAsFinished \n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
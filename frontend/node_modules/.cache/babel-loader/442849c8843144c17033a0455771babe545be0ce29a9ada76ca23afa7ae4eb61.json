{"ast":null,"code":"import { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\nexport class GoogleBooksService {\n  /**\n   * Search for books using Google Books API\n   */\n  static async searchBooks(query, maxResults = 20, startIndex = 0) {\n    const queryParams = new URLSearchParams({\n      q: query,\n      maxResults: maxResults.toString(),\n      startIndex: startIndex.toString()\n    });\n    const result = await __request(OpenAPI, {\n      method: 'GET',\n      url: `${this.BASE_URL}/search?${queryParams.toString()}`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Get popular books by category\n   */\n  static async getPopularBooks(category = 'fiction', maxResults = 20) {\n    const queryParams = new URLSearchParams({\n      category: category,\n      maxResults: maxResults.toString()\n    });\n    const result = await __request(OpenAPI, {\n      method: 'GET',\n      url: `${this.BASE_URL}/popular?${queryParams.toString()}`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Get trending books (recently published)\n   */\n  static async getTrendingBooks(maxResults = 20) {\n    const queryParams = new URLSearchParams({\n      maxResults: maxResults.toString()\n    });\n    const result = await __request(OpenAPI, {\n      method: 'GET',\n      url: `${this.BASE_URL}/trending?${queryParams.toString()}`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Get book details by Google Books ID\n   */\n  static async getBookById(bookId) {\n    const result = await __request({\n      method: 'GET',\n      path: `${this.BASE_URL}/${bookId}`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Convert Google Book to our Book format\n   */\n  static convertGoogleBookToBookFormat(googleBook) {\n    var _volumeInfo$industryI, _volumeInfo$industryI2, _volumeInfo$industryI3, _volumeInfo$industryI4, _volumeInfo$authors, _volumeInfo$imageLink;\n    const volumeInfo = googleBook.volumeInfo;\n    const isbn = ((_volumeInfo$industryI = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI === void 0 ? void 0 : (_volumeInfo$industryI2 = _volumeInfo$industryI.find(id => id.type === 'ISBN_13')) === null || _volumeInfo$industryI2 === void 0 ? void 0 : _volumeInfo$industryI2.identifier) || ((_volumeInfo$industryI3 = volumeInfo.industryIdentifiers) === null || _volumeInfo$industryI3 === void 0 ? void 0 : (_volumeInfo$industryI4 = _volumeInfo$industryI3.find(id => id.type === 'ISBN_10')) === null || _volumeInfo$industryI4 === void 0 ? void 0 : _volumeInfo$industryI4.identifier) || '';\n    return {\n      id: googleBook.id,\n      title: volumeInfo.title || 'Unknown Title',\n      authorName: ((_volumeInfo$authors = volumeInfo.authors) === null || _volumeInfo$authors === void 0 ? void 0 : _volumeInfo$authors.join(', ')) || 'Unknown Author',\n      isbn: isbn,\n      synopsis: volumeInfo.description || 'No description available.',\n      cover: ((_volumeInfo$imageLink = volumeInfo.imageLinks) === null || _volumeInfo$imageLink === void 0 ? void 0 : _volumeInfo$imageLink.thumbnail) || null,\n      publishedDate: volumeInfo.publishedDate,\n      pageCount: volumeInfo.pageCount,\n      categories: volumeInfo.categories,\n      averageRating: volumeInfo.averageRating || 0,\n      ratingsCount: volumeInfo.ratingsCount || 0,\n      isGoogleBook: true,\n      googleBookId: googleBook.id\n    };\n  }\n}\nGoogleBooksService.BASE_URL = 'http://localhost:8088/api/v1/google-books';","map":{"version":3,"names":["OpenAPI","request","__request","GoogleBooksService","searchBooks","query","maxResults","startIndex","queryParams","URLSearchParams","q","toString","result","method","url","BASE_URL","headers","getPopularBooks","category","getTrendingBooks","getBookById","bookId","path","convertGoogleBookToBookFormat","googleBook","_volumeInfo$industryI","_volumeInfo$industryI2","_volumeInfo$industryI3","_volumeInfo$industryI4","_volumeInfo$authors","_volumeInfo$imageLink","volumeInfo","isbn","industryIdentifiers","find","id","type","identifier","title","authorName","authors","join","synopsis","description","cover","imageLinks","thumbnail","publishedDate","pageCount","categories","averageRating","ratingsCount","isGoogleBook","googleBookId"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/app/services/services/GoogleBooksService.ts"],"sourcesContent":["import { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\n\nexport interface GoogleBookVolumeInfo {\n  title: string;\n  authors?: string[];\n  description?: string;\n  imageLinks?: {\n    thumbnail?: string;\n    smallThumbnail?: string;\n  };\n  publishedDate?: string;\n  pageCount?: number;\n  categories?: string[];\n  averageRating?: number;\n  ratingsCount?: number;\n  industryIdentifiers?: Array<{\n    type: string;\n    identifier: string;\n  }>;\n}\n\nexport interface GoogleBookItem {\n  id: string;\n  volumeInfo: GoogleBookVolumeInfo;\n}\n\nexport interface GoogleBooksResponse {\n  items?: GoogleBookItem[];\n  totalItems: number;\n}\n\nexport class GoogleBooksService {\n  private static readonly BASE_URL = 'http://localhost:8088/api/v1/google-books';\n\n  /**\n   * Search for books using Google Books API\n   */\n  public static async searchBooks(\n    query: string,\n    maxResults: number = 20,\n    startIndex: number = 0\n  ): Promise<GoogleBooksResponse> {\n    const queryParams = new URLSearchParams({\n      q: query,\n      maxResults: maxResults.toString(),\n      startIndex: startIndex.toString()\n    });\n\n    const result = await __request(OpenAPI, {\n      method: 'GET',\n      url: `${this.BASE_URL}/search?${queryParams.toString()}`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get popular books by category\n   */\n  public static async getPopularBooks(\n    category: string = 'fiction',\n    maxResults: number = 20\n  ): Promise<GoogleBooksResponse> {\n    const queryParams = new URLSearchParams({\n      category: category,\n      maxResults: maxResults.toString()\n    });\n\n    const result = await __request(OpenAPI, {\n      method: 'GET',\n      url: `${this.BASE_URL}/popular?${queryParams.toString()}`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get trending books (recently published)\n   */\n  public static async getTrendingBooks(\n    maxResults: number = 20\n  ): Promise<GoogleBooksResponse> {\n    const queryParams = new URLSearchParams({\n      maxResults: maxResults.toString()\n    });\n\n    const result = await __request(OpenAPI, {\n      method: 'GET',\n      url: `${this.BASE_URL}/trending?${queryParams.toString()}`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get book details by Google Books ID\n   */\n  public static async getBookById(bookId: string): Promise<GoogleBookItem> {\n    const result = await __request<GoogleBookItem>({\n      method: 'GET',\n      path: `${this.BASE_URL}/${bookId}`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Convert Google Book to our Book format\n   */\n  public static convertGoogleBookToBookFormat(googleBook: GoogleBookItem): any {\n    const volumeInfo = googleBook.volumeInfo;\n    const isbn = volumeInfo.industryIdentifiers?.find(id => id.type === 'ISBN_13')?.identifier ||\n                 volumeInfo.industryIdentifiers?.find(id => id.type === 'ISBN_10')?.identifier ||\n                 '';\n\n    return {\n      id: googleBook.id,\n      title: volumeInfo.title || 'Unknown Title',\n      authorName: volumeInfo.authors?.join(', ') || 'Unknown Author',\n      isbn: isbn,\n      synopsis: volumeInfo.description || 'No description available.',\n      cover: volumeInfo.imageLinks?.thumbnail || null,\n      publishedDate: volumeInfo.publishedDate,\n      pageCount: volumeInfo.pageCount,\n      categories: volumeInfo.categories,\n      averageRating: volumeInfo.averageRating || 0,\n      ratingsCount: volumeInfo.ratingsCount || 0,\n      isGoogleBook: true,\n      googleBookId: googleBook.id\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
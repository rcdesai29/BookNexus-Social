{"ast":null,"code":"// Direct API service to bypass OpenAPI issues\nlet cachedBooksData = null;\nlet cacheTime = 0;\nconst CACHE_DURATION = 3 * 60 * 1000; // 3 minutes\n\nexport const directApiService = {\n  async getGoogleBooks(query = 'bestsellers', maxResults = 20) {\n    // Use cache for trending/bestsellers queries to improve performance\n    if ((query === 'bestsellers' || query === 'trending') && cachedBooksData && Date.now() - cacheTime < CACHE_DURATION) {\n      console.log('Using cached books data for better performance');\n      return cachedBooksData;\n    }\n    try {\n      let endpoint = '';\n      if (query === 'bestsellers' || query === 'trending') {\n        endpoint = `http://localhost:8088/api/v1/google-books/trending?maxResults=${maxResults}`;\n      } else if (query === 'popular') {\n        endpoint = `http://localhost:8088/api/v1/google-books/popular?category=fiction&maxResults=${maxResults}`;\n      } else {\n        endpoint = `http://localhost:8088/api/v1/google-books/search?q=${encodeURIComponent(query)}&maxResults=${maxResults}&startIndex=0`;\n      }\n      console.log('Making direct API call to:', endpoint);\n      const response = await fetch(endpoint, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('API Response:', data);\n\n      // Cache the results for trending/bestsellers queries\n      if (query === 'bestsellers' || query === 'trending') {\n        cachedBooksData = data;\n        cacheTime = Date.now();\n        console.log('Cached books data for improved performance');\n      }\n      return data;\n    } catch (error) {\n      console.error('Direct API call failed:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["cachedBooksData","cacheTime","CACHE_DURATION","directApiService","getGoogleBooks","query","maxResults","Date","now","console","log","endpoint","encodeURIComponent","response","fetch","method","headers","status","Object","fromEntries","entries","ok","Error","data","json","error"],"sources":["/Users/cluckbucks/projects/booknexus-social/frontend/src/services/directApi.ts"],"sourcesContent":["// Direct API service to bypass OpenAPI issues\nlet cachedBooksData: any = null;\nlet cacheTime = 0;\nconst CACHE_DURATION = 3 * 60 * 1000; // 3 minutes\n\nexport const directApiService = {\n  async getGoogleBooks(query: string = 'bestsellers', maxResults: number = 20): Promise<any> {\n    // Use cache for trending/bestsellers queries to improve performance\n    if ((query === 'bestsellers' || query === 'trending') && cachedBooksData && (Date.now() - cacheTime < CACHE_DURATION)) {\n      console.log('Using cached books data for better performance');\n      return cachedBooksData;\n    }\n    try {\n      let endpoint = '';\n      \n      if (query === 'bestsellers' || query === 'trending') {\n        endpoint = `http://localhost:8088/api/v1/google-books/trending?maxResults=${maxResults}`;\n      } else if (query === 'popular') {\n        endpoint = `http://localhost:8088/api/v1/google-books/popular?category=fiction&maxResults=${maxResults}`;\n      } else {\n        endpoint = `http://localhost:8088/api/v1/google-books/search?q=${encodeURIComponent(query)}&maxResults=${maxResults}&startIndex=0`;\n      }\n      \n      console.log('Making direct API call to:', endpoint);\n      \n      const response = await fetch(endpoint, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('API Response:', data);\n      \n      // Cache the results for trending/bestsellers queries\n      if (query === 'bestsellers' || query === 'trending') {\n        cachedBooksData = data;\n        cacheTime = Date.now();\n        console.log('Cached books data for improved performance');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Direct API call failed:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA;AACA,IAAIA,eAAoB,GAAG,IAAI;AAC/B,IAAIC,SAAS,GAAG,CAAC;AACjB,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEtC,OAAO,MAAMC,gBAAgB,GAAG;EAC9B,MAAMC,cAAcA,CAACC,KAAa,GAAG,aAAa,EAAEC,UAAkB,GAAG,EAAE,EAAgB;IACzF;IACA,IAAI,CAACD,KAAK,KAAK,aAAa,IAAIA,KAAK,KAAK,UAAU,KAAKL,eAAe,IAAKO,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGP,SAAS,GAAGC,cAAe,EAAE;MACrHO,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;MAC7D,OAAOV,eAAe;IACxB;IACA,IAAI;MACF,IAAIW,QAAQ,GAAG,EAAE;MAEjB,IAAIN,KAAK,KAAK,aAAa,IAAIA,KAAK,KAAK,UAAU,EAAE;QACnDM,QAAQ,GAAG,iEAAiEL,UAAU,EAAE;MAC1F,CAAC,MAAM,IAAID,KAAK,KAAK,SAAS,EAAE;QAC9BM,QAAQ,GAAG,iFAAiFL,UAAU,EAAE;MAC1G,CAAC,MAAM;QACLK,QAAQ,GAAG,sDAAsDC,kBAAkB,CAACP,KAAK,CAAC,eAAeC,UAAU,eAAe;MACpI;MAEAG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEC,QAAQ,CAAC;MAEnD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,EAAE;QACrCI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,QAAQ,CAACI,MAAM,CAAC;MAChDR,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEQ,MAAM,CAACC,WAAW,CAACN,QAAQ,CAACG,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;MAEhF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMM,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCf,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEa,IAAI,CAAC;;MAElC;MACA,IAAIlB,KAAK,KAAK,aAAa,IAAIA,KAAK,KAAK,UAAU,EAAE;QACnDL,eAAe,GAAGuB,IAAI;QACtBtB,SAAS,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC;QACtBC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MAC3D;MAEA,OAAOa,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdhB,OAAO,CAACgB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}